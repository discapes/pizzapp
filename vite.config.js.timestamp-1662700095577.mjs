// vite.config.js
import { sveltekit } from "@sveltejs/kit/vite";

// tsoa.js
import { watch } from "chokidar";
import { readFile } from "fs/promises";
import globAsync from "glob";
import { load as parseYAML } from "js-yaml";
import { generateSpec } from "tsoa";
import { fileURLToPath } from "url";
import { promisify } from "util";
var __vite_injected_original_import_meta_url = "file:///C:/Users/MiikaTuominen/code/pizzapp/tsoa.js";
var glob = promisify(globAsync);
var specFile = "openapi.yaml";
var configFile = "tsoa.json";
var [spec, config] = await Promise.all([readFile(specFile).then((f) => parseYAML(f)), readFile(configFile).then((f) => JSON.parse(f))]);
async function build_oas() {
  try {
    console.log("building swagger.json...");
    await generateSpec({ ...config.tsoaOptions, spec }, config.compilerOptions);
    console.log("built!");
  } catch (e) {
    console.error(e);
  }
}
if (fileURLToPath(__vite_injected_original_import_meta_url) === process.argv[1]) {
  const files = (await Promise.all(config.tsoaOptions.controllerPathGlobs.map((p) => glob(p)))).flat();
  watch(files).on("change", (e, path2) => {
    console.log(e + " changed");
    build_oas();
  });
  watch(specFile).on("change", async (e, path2) => {
    console.log(specFile + " changed");
    spec = parseYAML(await readFile(specFile));
    build_oas();
  });
  build_oas();
}

// vite.config.js
import path from "path";
var config2 = {
  plugins: [
    sveltekit(),
    {
      name: "tsoa",
      buildStart: () => {
        build_oas();
      }
    }
  ],
  build: {
    sourcemap: "inline"
  },
  server: {
    fs: {
      allow: [path.resolve("../kit/packages/kit/src")]
    }
  },
  css: {
    preprocessorOptions: {
      scss: {
        loadPaths: ["src/styles/"]
      }
    }
  }
};
var vite_config_default = config2;
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiLCAidHNvYS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXE1paWthVHVvbWluZW5cXFxcY29kZVxcXFxwaXp6YXBwXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxNaWlrYVR1b21pbmVuXFxcXGNvZGVcXFxccGl6emFwcFxcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvTWlpa2FUdW9taW5lbi9jb2RlL3BpenphcHAvdml0ZS5jb25maWcuanNcIjtpbXBvcnQgeyBzdmVsdGVraXQgfSBmcm9tIFwiQHN2ZWx0ZWpzL2tpdC92aXRlXCI7XG5pbXBvcnQgYnVpbGRfb2FzIGZyb20gXCIuL3Rzb2FcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCd2aXRlJykuVXNlckNvbmZpZ30gKi9cbmNvbnN0IGNvbmZpZyA9IHtcblx0cGx1Z2luczogW1xuXHRcdHN2ZWx0ZWtpdCgpLFxuXHRcdHtcblx0XHRcdG5hbWU6IFwidHNvYVwiLFxuXHRcdFx0YnVpbGRTdGFydDogKCkgPT4ge1xuXHRcdFx0XHRidWlsZF9vYXMoKTtcblx0XHRcdH0sXG5cdFx0fSxcblx0XSxcblx0YnVpbGQ6IHtcblx0XHRzb3VyY2VtYXA6IFwiaW5saW5lXCIsXG5cdH0sXG5cdHNlcnZlcjoge1xuXHRcdGZzOiB7XG5cdFx0XHRhbGxvdzogW3BhdGgucmVzb2x2ZShcIi4uL2tpdC9wYWNrYWdlcy9raXQvc3JjXCIpXSxcblx0XHR9LFxuXHR9LFxuXHRjc3M6IHtcblx0XHRwcmVwcm9jZXNzb3JPcHRpb25zOiB7XG5cdFx0XHRzY3NzOiB7XG5cdFx0XHRcdGxvYWRQYXRoczogW1wic3JjL3N0eWxlcy9cIl0sXG5cdFx0XHR9LFxuXHRcdH0sXG5cdH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWc7XG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXE1paWthVHVvbWluZW5cXFxcY29kZVxcXFxwaXp6YXBwXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxNaWlrYVR1b21pbmVuXFxcXGNvZGVcXFxccGl6emFwcFxcXFx0c29hLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9NaWlrYVR1b21pbmVuL2NvZGUvcGl6emFwcC90c29hLmpzXCI7aW1wb3J0IHsgd2F0Y2ggfSBmcm9tIFwiY2hva2lkYXJcIjtcbmltcG9ydCB7IHJlYWRGaWxlIH0gZnJvbSBcImZzL3Byb21pc2VzXCI7XG5pbXBvcnQgZ2xvYkFzeW5jIGZyb20gXCJnbG9iXCI7XG5pbXBvcnQgeyBsb2FkIGFzIHBhcnNlWUFNTCB9IGZyb20gXCJqcy15YW1sXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVNwZWMgfSBmcm9tIFwidHNvYVwiO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gXCJ1cmxcIjtcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gXCJ1dGlsXCI7XG5jb25zdCBnbG9iID0gcHJvbWlzaWZ5KGdsb2JBc3luYyk7XG5cbmNvbnN0IHNwZWNGaWxlID0gXCJvcGVuYXBpLnlhbWxcIjtcbmNvbnN0IGNvbmZpZ0ZpbGUgPSBcInRzb2EuanNvblwiO1xuXG5sZXQgW3NwZWMsIGNvbmZpZ10gPSBhd2FpdCBQcm9taXNlLmFsbChbcmVhZEZpbGUoc3BlY0ZpbGUpLnRoZW4oKGYpID0+IHBhcnNlWUFNTChmKSksIHJlYWRGaWxlKGNvbmZpZ0ZpbGUpLnRoZW4oKGYpID0+IEpTT04ucGFyc2UoZikpXSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkX29hcygpIHtcblx0dHJ5IHtcblx0XHRjb25zb2xlLmxvZyhcImJ1aWxkaW5nIHN3YWdnZXIuanNvbi4uLlwiKTtcblx0XHRhd2FpdCBnZW5lcmF0ZVNwZWMoeyAuLi5jb25maWcudHNvYU9wdGlvbnMsIHNwZWMgfSwgY29uZmlnLmNvbXBpbGVyT3B0aW9ucyk7XG5cdFx0Y29uc29sZS5sb2coXCJidWlsdCFcIik7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRjb25zb2xlLmVycm9yKGUpO1xuXHR9XG59XG5cbmlmIChmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCkgPT09IHByb2Nlc3MuYXJndlsxXSkge1xuXHRjb25zdCBmaWxlcyA9IChhd2FpdCBQcm9taXNlLmFsbChjb25maWcudHNvYU9wdGlvbnMuY29udHJvbGxlclBhdGhHbG9icy5tYXAoKHApID0+IGdsb2IocCkpKSkuZmxhdCgpO1xuXG5cdHdhdGNoKGZpbGVzKS5vbihcImNoYW5nZVwiLCAoZSwgcGF0aCkgPT4ge1xuXHRcdGNvbnNvbGUubG9nKGUgKyBcIiBjaGFuZ2VkXCIpO1xuXHRcdGJ1aWxkX29hcygpO1xuXHR9KTtcblx0d2F0Y2goc3BlY0ZpbGUpLm9uKFwiY2hhbmdlXCIsIGFzeW5jIChlLCBwYXRoKSA9PiB7XG5cdFx0Y29uc29sZS5sb2coc3BlY0ZpbGUgKyBcIiBjaGFuZ2VkXCIpO1xuXHRcdHNwZWMgPSBwYXJzZVlBTUwoYXdhaXQgcmVhZEZpbGUoc3BlY0ZpbGUpKTtcblx0XHRidWlsZF9vYXMoKTtcblx0fSk7XG5cdGJ1aWxkX29hcygpO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFxUyxTQUFTLGlCQUFpQjs7O0FDQXhDLFNBQVMsYUFBYTtBQUM3UyxTQUFTLGdCQUFnQjtBQUN6QixPQUFPLGVBQWU7QUFDdEIsU0FBUyxRQUFRLGlCQUFpQjtBQUNsQyxTQUFTLG9CQUFvQjtBQUM3QixTQUFTLHFCQUFxQjtBQUM5QixTQUFTLGlCQUFpQjtBQU5zSixJQUFNLDJDQUEyQztBQU9qTyxJQUFNLE9BQU8sVUFBVSxTQUFTO0FBRWhDLElBQU0sV0FBVztBQUNqQixJQUFNLGFBQWE7QUFFbkIsSUFBSSxDQUFDLE1BQU0sTUFBTSxJQUFJLE1BQU0sUUFBUSxJQUFJLENBQUMsU0FBUyxRQUFRLEVBQUUsS0FBSyxDQUFDLE1BQU0sVUFBVSxDQUFDLENBQUMsR0FBRyxTQUFTLFVBQVUsRUFBRSxLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV0SSxlQUFPLFlBQW1DO0FBQ3pDLE1BQUk7QUFDSCxZQUFRLElBQUksMEJBQTBCO0FBQ3RDLFVBQU0sYUFBYSxFQUFFLEdBQUcsT0FBTyxhQUFhLEtBQUssR0FBRyxPQUFPLGVBQWU7QUFDMUUsWUFBUSxJQUFJLFFBQVE7QUFBQSxFQUNyQixTQUFTLEdBQVA7QUFDRCxZQUFRLE1BQU0sQ0FBQztBQUFBLEVBQ2hCO0FBQ0Q7QUFFQSxJQUFJLGNBQWMsd0NBQWUsTUFBTSxRQUFRLEtBQUssSUFBSTtBQUN2RCxRQUFNLFNBQVMsTUFBTSxRQUFRLElBQUksT0FBTyxZQUFZLG9CQUFvQixJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSztBQUVuRyxRQUFNLEtBQUssRUFBRSxHQUFHLFVBQVUsQ0FBQyxHQUFHQSxVQUFTO0FBQ3RDLFlBQVEsSUFBSSxJQUFJLFVBQVU7QUFDMUIsY0FBVTtBQUFBLEVBQ1gsQ0FBQztBQUNELFFBQU0sUUFBUSxFQUFFLEdBQUcsVUFBVSxPQUFPLEdBQUdBLFVBQVM7QUFDL0MsWUFBUSxJQUFJLFdBQVcsVUFBVTtBQUNqQyxXQUFPLFVBQVUsTUFBTSxTQUFTLFFBQVEsQ0FBQztBQUN6QyxjQUFVO0FBQUEsRUFDWCxDQUFDO0FBQ0QsWUFBVTtBQUNYOzs7QURuQ0EsT0FBTyxVQUFVO0FBR2pCLElBQU1DLFVBQVM7QUFBQSxFQUNkLFNBQVM7QUFBQSxJQUNSLFVBQVU7QUFBQSxJQUNWO0FBQUEsTUFDQyxNQUFNO0FBQUEsTUFDTixZQUFZLE1BQU07QUFDakIsa0JBQVU7QUFBQSxNQUNYO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNOLFdBQVc7QUFBQSxFQUNaO0FBQUEsRUFDQSxRQUFRO0FBQUEsSUFDUCxJQUFJO0FBQUEsTUFDSCxPQUFPLENBQUMsS0FBSyxRQUFRLHlCQUF5QixDQUFDO0FBQUEsSUFDaEQ7QUFBQSxFQUNEO0FBQUEsRUFDQSxLQUFLO0FBQUEsSUFDSixxQkFBcUI7QUFBQSxNQUNwQixNQUFNO0FBQUEsUUFDTCxXQUFXLENBQUMsYUFBYTtBQUFBLE1BQzFCO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFDRDtBQUVBLElBQU8sc0JBQVFBOyIsCiAgIm5hbWVzIjogWyJwYXRoIiwgImNvbmZpZyJdCn0K
